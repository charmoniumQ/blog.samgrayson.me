<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://samgrayson.me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://samgrayson.me/" rel="alternate" type="text/html" hreflang="en_US"/><updated>2019-08-12T15:14:05-05:00</updated><id>https://samgrayson.me/feed.xml</id><title type="html">Interesting Thoughts</title><subtitle>Blog about computers, mathematics, and philosophy. Occasionally, other people find my thoughts on these topics interesting.</subtitle><author><name>Samuel Grayson</name></author><entry><title type="html">Monads as a Programming Pattern</title><link href="https://samgrayson.me/2019-08-06-monads-as-a-programming-pattern/" rel="alternate" type="text/html" title="Monads as a Programming Pattern"/><published>2019-08-06T00:00:00-05:00</published><updated>2019-08-06T00:00:00-05:00</updated><id>https://samgrayson.me/monads-as-a-programming-pattern</id><content type="html" xml:base="https://samgrayson.me/2019-08-06-monads-as-a-programming-pattern/">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt; &lt;p&gt;This article is written from a programmer’s perspective, where a monad is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;&lt;em&gt;software engineering pattern&lt;/em&gt;&lt;/a&gt;. Like other patterns, you may have already used it without knowing it was the monad pattern. There is still value in studying such patterns, because then you can use it more fluidly. There is a mathematical &lt;a href=&quot;https://ncatlab.org/nlab/show/monad&quot;&gt;category-theory definition&lt;/a&gt;, but you can use them effectively without understanding that (so don’t @ me, Brendan).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Imprecise definition:&lt;/strong&gt; A monad is a type that wraps an object of another type. There is no direct way to get that ‘inside’ object. Instead you ask the monad to act on it for you. Monadic classes are a lot like classes implementing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;visitor pattern&lt;/a&gt;, but monads are capable of returning something wrapped in another monad. This essential property makes functions on monads composable. I’ll get to a precise definition after you understand the imprecise one through some examples.&lt;/p&gt; &lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt; &lt;h3 id=&quot;maybenullableoptional-monad&quot;&gt;Maybe/Nullable/Optional monad&lt;/h3&gt; &lt;p&gt;Our first example is Maybe. I will write its interface in pseudocode resembling Java.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As promised, the Maybe monad can contain another object, and we can ask it to act indirectly. Notice that apply doesn’t take a function from &lt;code class=&quot;highlighter-rouge&quot;&gt;T -&amp;gt; V&lt;/code&gt;, but rather from &lt;code class=&quot;highlighter-rouge&quot;&gt;T -&amp;gt; Maybe&amp;lt;V&amp;gt;&lt;/code&gt;. It unboxes the inside object, executes the function and returns the new box. This allows monads to be chained together.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Let's assume getInput asks the user for input,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// and returns Some(value) if the user enters a valid value.&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Otherwise it returns Nothing.&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maybe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedRatio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// maybeDivide returns a Maybe&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// because if the denominator is zero, it returns Nothing.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maybeDivide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; took &lt;code class=&quot;highlighter-rouge&quot;&gt;T -&amp;gt; V&lt;/code&gt;, this would evaluate to a &lt;code class=&quot;highlighter-rouge&quot;&gt;Maybe&amp;lt;Maybe&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt;, which quickly becomes unwieldy. Also note that a function &lt;code class=&quot;highlighter-rouge&quot;&gt;T -&amp;gt; V&lt;/code&gt; can still be used; just compose it with &lt;code class=&quot;highlighter-rouge&quot;&gt;Some&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// let func: T -&amp;gt; V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// result is Maybe&amp;lt;V&amp;gt;, as desired&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;listcollection-monad&quot;&gt;List/Collection monad&lt;/h3&gt; &lt;p&gt;In the previous example, you might think a monad is just an interface for &lt;a href=&quot;https://en.wikipedia.org/wiki/Object_composition#Aggregation&quot;&gt;aggregating (in the OOP sense)&lt;/a&gt; another object, but here is a monad that is more general than that.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// makes collection containing one element&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// runs func on every element and concatenates the results&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// runs func on every element&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// implemented by calling flatMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Instead of calling the operator &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;, I called it &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; as &lt;a href=&quot;https://stackoverflow.com/questions/26684562/whats-the-difference-between-map-and-flatmap-methods-in-java-8&quot;&gt;the name is well-known&lt;/a&gt;. Again, &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; is more general because it can implement &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, but not the other way around (you’d need &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; something like Python’s &lt;a href=&quot;https://docs.python.org/3.7/library/itertools.html#itertools.chain.from_iterable&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chain.from_iterables&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &lt;h3 id=&quot;promiseawaitable-monad&quot;&gt;Promise/Awaitable monad&lt;/h3&gt; &lt;p&gt;In the previous two examples, you may have wanted a method that exposes the wrapped value(s), maybe &lt;code class=&quot;highlighter-rouge&quot;&gt;getValues&lt;/code&gt;. The whole point of the monad pattern is to avoid that urge, and . It’s like &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot;&gt;data-hiding (in the OOP sense)&lt;/a&gt;. Instead of accessing elements directly, you chain on your computations through &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;. The Promise monad is an example where you physically can’t ask for the wrapped values, because it might not exist yet! &lt;a href=&quot;https://stackoverflow.com/q/45378267/1078199&quot;&gt;A common question&lt;/a&gt; is how to get the value &lt;em&gt;out&lt;/em&gt; of the promise for subsequent computation, but the answer is instead to put the subsequent computation &lt;em&gt;into&lt;/em&gt; the promise, using &lt;code class=&quot;highlighter-rouge&quot;&gt;.then&lt;/code&gt;.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makePromise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this would be cleaner with Promise.all&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// but that would obfuscate the point I am trying to make here&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makePromise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Streams naturally arise as well; They are just promises that get &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt;d multiple times.&lt;/p&gt; &lt;h2 id=&quot;precise-definition&quot;&gt;Precise definition&lt;/h2&gt; &lt;p&gt;Borrowing heavily from &lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_(functional_programming)#Definition&quot;&gt;Wikipedia&lt;/a&gt;, a monad is three things…&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A generic type &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; .&lt;/li&gt; &lt;li&gt;A function, often called &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;of&lt;/code&gt; (&lt;a href=&quot;https://github.com/fantasyland/fantasy-land&quot;&gt;JS fantasy-land&lt;/a&gt;), or &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; (&lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.12.0.0/Control-Monad.html#v:return&quot;&gt;Haskell&lt;/a&gt;), with signature is &lt;code class=&quot;highlighter-rouge&quot;&gt;T -&amp;gt; M&amp;lt;T&amp;gt;&lt;/code&gt;. In my examples this is, &lt;code class=&quot;highlighter-rouge&quot;&gt;Nullable.Some&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection.makeCollection&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.makePromise&lt;/code&gt;. This convertor takes a regular value and wraps it in a monadic one.&lt;/li&gt; &lt;li&gt;A combinator, often called &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;chain&lt;/code&gt; (&lt;a href=&quot;https://github.com/fantasyland/fantasy-land&quot;&gt;JS fantasy-land&lt;/a&gt;) or spelled as an infix operator, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;=&lt;/code&gt; (&lt;a href=&quot;https://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.12.0.0/Control-Monad.html#v:-62--62--61-&quot;&gt;Haskell&lt;/a&gt;), with signature &lt;code class=&quot;highlighter-rouge&quot;&gt;(M&amp;lt;T&amp;gt;, T -&amp;gt; M&amp;lt;V&amp;gt;) -&amp;gt; M&amp;lt;V&amp;gt;&lt;/code&gt;. In my examples this is, &lt;code class=&quot;highlighter-rouge&quot;&gt;Nullable.apply&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;Collection.flatMap&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.then&lt;/code&gt;. This combinator unwraps the monad, does an operation, and returns the monad of the result.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;… that respects these three laws…&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap&lt;/code&gt; is the left-identity of &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap(a).bind((T x) -&amp;gt; f(x))&lt;/code&gt; evaluates to the same thing as &lt;code class=&quot;highlighter-rouge&quot;&gt;f(a)&lt;/code&gt;. This means that &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap&lt;/code&gt; really just packages its input into a container.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrap&lt;/code&gt; is the right-identity of &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;monadicObj.bind((T x) -&amp;gt; wrap(x))&lt;/code&gt; evaluates to the same thing as &lt;code class=&quot;highlighter-rouge&quot;&gt;monadicObj&lt;/code&gt;. This means that &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; really does unwrap the container properly, accessing the insides.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; is associative:&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;monadicObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;evaluates to the same thing as&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;monadicObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This last law is why people like Promises; they turn horizontally &lt;a href=&quot;https://medium.com/@justintulk/flattening-nested-promises-in-javascript-88f04793ded7&quot;&gt;nested callbacks into vertically chained callbacks&lt;/a&gt;, saving us from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)&quot;&gt;Pyramid of Doom&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://qr.ae/TWvqL3&quot;&gt; &lt;img src=&quot;/assets/img/monads-as-a-programming-pattern/pyramid_of_doom.jpg&quot; alt=&quot;pyramid of doom&quot; /&gt; &lt;/a&gt;&lt;/p&gt; &lt;p&gt;These laws let me write functions that will work with &lt;em&gt;any&lt;/em&gt; monad. For example, I mentioned implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; on some specific monads. Now I’ll implement it for all monads that follow the monad-laws.&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// I'll assume that all monads in this language implement the interface Monad&amp;lt;T&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;category-theory&quot;&gt;Category Theory&lt;/h3&gt; &lt;p&gt;The concept of monads comes from &lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_(category_theory)&quot;&gt;category theory&lt;/a&gt;. Their use in computer programming was first explicated rather recently, in 1989 (&lt;a href=&quot;https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.2787&quot;&gt;CiteSeerX 10.1.1.26.2787&lt;/a&gt;). The monad has friends which are also borrowed into programming: monoids, functors, and applicatives. Although the math is important and valuable I think the monad pattern can be used effectively without knowledge of category theory, just as a programmer can effectively use the &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;-functions without understanding &lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_calculus&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\lambda&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;λ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;-calculus&lt;/a&gt;. The concept from category theory is just inspiration. The laws I stated above are enough for program-correctness.&lt;/p&gt; &lt;p&gt;If a construct does not satisfy the monad laws, it technically isn’t a monad, but it might still be monad-inspired. In most JS libraries, &lt;code class=&quot;highlighter-rouge&quot;&gt;.then&lt;/code&gt; can take &lt;code class=&quot;highlighter-rouge&quot;&gt;A -&amp;gt; Monad&amp;lt;B&amp;gt;&lt;/code&gt; AND &lt;code class=&quot;highlighter-rouge&quot;&gt;A -&amp;gt; B&lt;/code&gt; (not monad-compliant). This design choice breaks associativity for objects with a property named &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/a/45772042/1078199&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/50173415/1078199&quot;&gt;2&lt;/a&gt;). This is not necessarily wrong or bad. I personally find it a pragmatic decision that often simplifies code, even though it is less theoretically nice. &lt;a href=&quot;[https://github.com/briancavalier/creed](https://github.com/briancavalier/creed)&quot;&gt;Some JS libraries&lt;/a&gt; do fit the mathematical monad bill. Even Haskell’s so-called &lt;code class=&quot;highlighter-rouge&quot;&gt;IO Monad&lt;/code&gt; &lt;a href=&quot;https://www.quora.com/How-would-you-explain-a-concept-of-monads-to-a-non-CS-person&quot;&gt;may not even be a proper category-theory monad&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; is so commonly used that Haskell has special syntax for it: &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/do_notation&quot;&gt;do-notation&lt;/a&gt;. Python, JavaScript, and Rust have this &lt;a href=&quot;https://en.wikipedia.org/wiki/Syntactic_sugar&quot;&gt;syntactic sugar&lt;/a&gt; as well, but in disguise as I will show you shortly.&lt;/p&gt; &lt;h3 id=&quot;haskells-do-notation&quot;&gt;Haskell’s do-notation&lt;/h3&gt; &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- remember `&amp;gt;&amp;gt;=` in Haskell means `.bind` in Java,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- and `\x -&amp;gt;` is the start of a lambda, like `((T x) -&amp;gt;` in Java.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monadicObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;is &lt;a href=&quot;https://en.wikipedia.org/wiki/Semantics_(computer_science)&quot;&gt;semantically equivalent&lt;/a&gt; to&lt;/p&gt; &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monadicObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;So a program that gets to integers written using the vanilla syntax looks like this:&lt;/p&gt; &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- x and y are just regular ints (remember the signature of &amp;gt;&amp;gt;= (AKA bind)).&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- We have to return a monad&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- (remember the signature of bind)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Remember that `return` is not a keyword in Haskell; just a regular function&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- It refers to the function that wraps a regular value in a monad.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And this is the semantically equivalent using do-notation:&lt;/p&gt; &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Everything after here goes after: getInput &amp;gt;&amp;gt;= \x -&amp;gt; ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Everything after here goes after: getInput &amp;gt;&amp;gt;= \y -&amp;gt; ...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- x and y are just regular ints, not wrapped ints.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It is a weird transformation, but you can see its utility: we can—to some extent—forget that &lt;code class=&quot;highlighter-rouge&quot;&gt;getLine&lt;/code&gt; returns wrapped values; &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is just a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;. This makes writing monadic code as natural as operating on regular values.&lt;/p&gt; &lt;h3 id=&quot;state&quot;&gt;State&lt;/h3&gt; &lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;getInput&lt;/code&gt; is a pure function: it takes a function of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Int -&amp;gt; Void&lt;/code&gt; and calls it with an argument and returns &lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt;. Although the returned value is always the same (&lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt;), the argument it passes could be different in subsequent calls. This is how we can model what would otherwise be a non-deterministic function in a pure-functional way. Pure functional programming languages represent &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Understanding_monads/IO#The_universe_as_part_of_our_program&quot;&gt;the whole outside world&lt;/a&gt; as a monadic context. Programs just bind computation onto this context.&lt;/p&gt; &lt;h3 id=&quot;control-flow&quot;&gt;Control-flow&lt;/h3&gt; &lt;p&gt;Monads are often called &lt;a href=&quot;http://www.thisurlisfalse.com/programmable-semicolon-monads-in-haskell/&quot;&gt;programmable semicolons&lt;/a&gt;, because the monad’s &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; controls the subsequent computation.&lt;/p&gt; &lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- the List monad controls the code at this point&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- in fact, it runs once for each element in the list.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This allows for complex control-flow operations (such as coroutines) to be implemented at the user-level in a monad instead of the language-level. Languages without do-notation have to bend over backwards to emulate it in specific cases, as we will see.&lt;/p&gt; &lt;h3 id=&quot;cpythonjavascript-await-keyword&quot;&gt;C#/Python/JavaScript await keyword&lt;/h3&gt; &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; keyword in other languages emulates do-notation for Promise monads. Consider JavaScript’s &lt;a href=&quot;https://javascript.info/async-await&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;&lt;/a&gt;; It makes everything after the &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; the body of a function that is inputted to &lt;code class=&quot;highlighter-rouge&quot;&gt;.then&lt;/code&gt;.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makePromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;is equivalent to:&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makePromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; in Python and other languages does this too—but it is less apparent because callback-based promises are less prominent in those language communities. What do-notation does for all monads, &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; does for &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; monads: it makes writing asynchronous code almost as natural as writing synchronous code.&lt;/p&gt; &lt;h3 id=&quot;rust-question-mark-operator&quot;&gt;Rust question-mark operator&lt;/h3&gt; &lt;p&gt;Rust does &lt;a href=&quot;https://doc.rust-lang.org/book/ch09-00-error-handling.html&quot;&gt;not have exceptions&lt;/a&gt; (!), so you might think error-handling would be painful; you would have to anticipate failure at every possible failure point.&lt;/p&gt; &lt;p&gt;Rust has a &lt;a href=&quot;https://m4rw3r.github.io/rust-questionmark-operator&quot;&gt;question-mark operator&lt;/a&gt; which emulates do-notation for their &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt; monad (which is also known as &lt;code class=&quot;highlighter-rouge&quot;&gt;Nullable&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Maybe&lt;/code&gt; in other languages). The question-mark operator makes the lack of exceptions palatable. It lets us call functions which might not succeed with impunity.&lt;/p&gt; &lt;p&gt;We must explicitly handle every error:&lt;/p&gt; &lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trySuspiciousOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Maybe you don't know Rust.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Just know that this is called &quot;pattern matching on a tagged union.&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// It asks if wrappedA looks like Some(_) or Nothing.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trySuspiciousOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;However, we can rewrite the code like this:&lt;/p&gt; &lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trySuspiciousOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trySuspiciousOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Even this code is non-idiomatic; do not emulate&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As you can see, these language features are just special cases of the more general do-notation. There is &lt;a href=&quot;https://varkor.github.io/blog/2018/11/10/monadic-do-notation-in-rust-part-i.html&quot;&gt;a proposal to incorporate do-notation into Rust&lt;/a&gt;. Since Rust has a different semantic model than Haskell, there are devils in multiple details of the proposal.&lt;/p&gt; &lt;h2 id=&quot;looking-forward&quot;&gt;Looking forward&lt;/h2&gt; &lt;p&gt;Here are some ways of thinking about monads. There are other ways to think about monads; I just picked three that make sense to me and seem exhaustive.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Sometimes the monad acts like a container of another type, as in the Collection monad. This is why some people emphatically exclaim eureka’s like “a monad is just like &lt;a href=&quot;https://blog.plover.com/prog/burritos.html&quot;&gt;a burrito&lt;/a&gt;”, “&lt;a href=&quot;http://telofy.soup.io/post/23797479/Think-of-a-monad-as-a-spacesuit&quot;&gt;a spacesuit&lt;/a&gt;”, or “&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/1bymg1/monads_are_burritos_in_spacesuits_full_of_nuclear/&quot;&gt;a burrito in a spacesuit&lt;/a&gt;.” These people miss that it can be anything else; in many use-cases the monad can’t simply ‘contain’ it. While the authors might understand this, a novice reader likely won’t.&lt;/li&gt; &lt;li&gt;In these non-containing use-cases, the monad can act like a potential for there being a value, kind of like a Promise. Often monads in this case have the same semantics as “&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;continuations&lt;/a&gt;” or callbacks: I don’t have the value, but I can have the guy who does call (haha) you.&lt;/li&gt; &lt;li&gt;Sometimes a monad can act like the context for data. This last case is used in functional programming languages to isolate impure side-effects of functions. &lt;code class=&quot;highlighter-rouge&quot;&gt;getLine&lt;/code&gt; in Haskell returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; in an &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Understanding_monads/IO&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IO&lt;/code&gt;&lt;/a&gt; monad. Perhaps you would have a Thread monad, that represents thread-local data (the thread is context for the data). You can’t operate on the data because it is not in your thread, but you can ask the other thread to operate on it for you. I chose not to elaborate examples of this use-case because it is less applicable outside of ML-family languages.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Now you know the pattern. It is useful to recognize in the wild, and it is a good tool in the box.&lt;/p&gt; &lt;h3 id=&quot;maybe-this-explanation-is-bad&quot;&gt;Maybe this explanation is bad&lt;/h3&gt; &lt;p&gt;It seems everyone who learns about monads goes through &lt;a href=&quot;https://stackoverflow.com/a/19551168/1078199&quot;&gt;this cycle&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt; &lt;ol&gt; &lt;li&gt;person X doesn’t understand monads&lt;/li&gt; &lt;li&gt;person X works long and hard, and groks monads&lt;/li&gt; &lt;li&gt;person X experiences amazing feeling of enlightenment, wonders why others are not similarly enlightened&lt;/li&gt; &lt;li&gt;person X gives horrible, incomplete, inaccurate, oversimplified, and confusing explanation of monads to others which probably makes them think that monads are stupid, dumb, worthless, overcomplicated, unnecessary, something incorrect, or a mental wank-ercise&lt;/li&gt; &lt;/ol&gt; &lt;/blockquote&gt; &lt;p&gt;It happens so much, there are names for it: some call it &lt;a href=&quot;https://www.youtube.com/watch?v=dkZFtimgAcM&quot;&gt;The Curse of the Monad&lt;/a&gt;, others &lt;a href=&quot;https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/&quot;&gt;The Monad Tutorial Fallacy&lt;/a&gt;. There is even the meme “monads are just monoids on the category of endofunctors; What part of that don’t you understand?”&lt;/p&gt; &lt;p&gt;It took me three tries over the past five years to understand monads. Of all the presentations I had read,&lt;/p&gt; &lt;ol&gt; &lt;li&gt;None made it feel like an abstraction of a programming pattern.&lt;/li&gt; &lt;li&gt;None pointed out how I was already using monadic-inspired constructs in my code.&lt;/li&gt; &lt;li&gt;None pointed out the connection with &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The first point was a pragmatic choice to emphasize the utility of a monad, and the latter two are ways of connecting it to things the reader probably already understands. I acknowledge that this article probably won’t help most people because I might not be good at explaining how I learned this thing, and there is a large possibility that I don’t have the same learning style as you. However, I do hope the act of reading it inspires an original thought in at least a few readers or even one; That will make all this worthwhile.&lt;/p&gt; &lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html&quot;&gt;You Could Have Invented Monads! (And Maybe You Already Have.)&lt;/a&gt; This is the best tutorial I have read through for its brevity and the challenges it gives the reader.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://wiki.haskell.org/Monad_tutorials_timeline&quot;&gt;Monad tutorials timeline&lt;/a&gt; This is a somewhat opinionated list of many blogposts like this one. Given the variety of pedagogical choices, there is likely one that is suited to your learning style.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Category_theory&quot;&gt;Wikibooks Haskell/Category Theory&lt;/a&gt; This is more technical, delving into the actual category theory. &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Applicative_functors#A_sliding_scale_of_power&quot;&gt;A different chapter&lt;/a&gt; draws a progression from functors to applicatives to monads. The series is great if you want a deeper dive.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/&quot;&gt;Category Theory for Programmers&lt;/a&gt; I’ve only the first half, but this seems like the most complete way to learn this while keeping ones sanity (as opposed to reading a math book on category theory).&lt;/li&gt; &lt;/ul&gt;</content><author><name>Samuel Grayson</name></author><category term="programming"/><summary type="html">This article is written from a programmer's perspective, where a monad is a _software engineering pattern_. It's just another tool for your box.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samgrayson.me/assets/img/monads-as-a-programming-pattern/toolbox.png"/></entry><entry><title type="html">Creative Thinking in Math Class</title><link href="https://samgrayson.me/2017-05-20-creative-thinking-in-math-class/" rel="alternate" type="text/html" title="Creative Thinking in Math Class"/><published>2017-05-20T00:00:00-05:00</published><updated>2017-05-20T00:00:00-05:00</updated><id>https://samgrayson.me/creative-thinking-in-math-class</id><content type="html" xml:base="https://samgrayson.me/2017-05-20-creative-thinking-in-math-class/">&lt;p&gt;Most students will say math class is stupid and boring. As a math person myself, I have to say: they’re right! Math taught in school is twelve years of Pavlovian training to associate math with arbitrariness and fear. Not only does this rob the student of a potentially enjoyable experience, it robs the student of the transferable skills that are exercised in math. I will give two examples.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/creative-thinking-in-math-class/rick_on_school.jpg&quot; alt=&quot;Rick Sanchez on scohol&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;transferable-skill-problem-solving&quot;&gt;Transferable Skill: Problem-Solving&lt;/h2&gt; &lt;p&gt;Asking novel kinds of questions teaches students how to solve problems they haven’t explicitly learned how to solve. In any job position, you will be asked to do this. Some students are afraid to trust their own original thoughts. Explicit practice with feedback can help them eventually use their own intelligence when making choices. I don’t think &lt;em&gt;only&lt;/em&gt; asking novel questions to students is necessarily a good idea, but I think we to ask more than none.&lt;/p&gt; &lt;p&gt;Here is a problem that requires original thinking to solve the first time.&lt;/p&gt; &lt;p&gt;This is a checkerboard with dominoes where each domino takes up two squares.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/creative-thinking-in-math-class/checkerboard_seutp_with_dominoes.png&quot; alt=&quot;checkerboard setup with dominoes&quot; /&gt;&lt;/p&gt; &lt;p&gt;It can be tiled with dominoes without any overlap or dominoes hanging off of the edge.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/creative-thinking-in-math-class/checkerboard_tiled_with_dominoes.png&quot; alt=&quot;checkboard tiled with dominoes&quot; /&gt;&lt;/p&gt; &lt;p&gt;If I cut off the two opposite red corners, can I still tile the board?&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/creative-thinking-in-math-class/checkerboard_with_corners_cut_off.png&quot; alt=&quot;checkerboard with corners cut off&quot; /&gt;&lt;/p&gt; &lt;p&gt;You may identify one tiling pattern that does not work, but can you convince me that &lt;em&gt;no&lt;/em&gt; tiling pattern will work?&lt;/p&gt; &lt;p&gt;This is a tough question, but in cases like this, a teacher can ask leading questions that guide the student to an answer for the difficult question. For example, the teacher could ask,&lt;/p&gt; &lt;ol&gt; &lt;li&gt;How many squares are there on the original board? &lt;br /&gt;&lt;span class=&quot;spoiler&quot;&gt;&lt;span&gt; Since the board is 8x8, there were 64 squares before the two corner tiles were removed. &lt;/span&gt;&lt;button&gt;&lt;/button&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;After the corners are removed, how many of those that remain are black? How many are red? &lt;br /&gt;&lt;span class=&quot;spoiler&quot;&gt;&lt;span&gt; Out of the original 64, there must be 32 red and 32 black, but I cut off two red squares. Therefore there are 30 red and 32 black. &lt;/span&gt;&lt;button&gt;&lt;/button&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;Can I place a domino such that it covers only two black squares? &lt;br /&gt;&lt;span class=&quot;spoiler&quot;&gt;&lt;span&gt; No. Each domino must cover one red and one black, no matter how it is placed. &lt;/span&gt;&lt;button&gt;&lt;/button&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;Back to the original question, can all of the red tiles and all of the black tiles be covered by dominoes? &lt;br /&gt;&lt;span class=&quot;spoiler&quot;&gt;&lt;span&gt; No, because the are 32 black tiles, 30 red tiles, and each domino must cover one of both. No matter how you do it, you will end up with 2 uncovered black tiles. &lt;br /&gt; &lt;img alt=&quot;checkboard not tiled with dominoes&quot; src=&quot;/assets/img/creative-thinking-in-math-class/checkerboard_not_tiled_with_dominoes.png&quot; /&gt; &lt;/span&gt;&lt;button&gt;&lt;/button&gt;&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Paradoxically, the teacher helped the student by asking more questions. Students do not even need a grasp of math before they can begin answering novel questions like this one.&lt;/p&gt; &lt;p&gt;This style of thinking is valuable without a mentor as well. Students should learn that even though they can’t answer the big question, they can still make up other small questions (using some of their own ingenuity) which they can answer. Perhaps math units should start with guiding questions, and then slowly allow the student to make up their own questions. Currently, there is absolutely no incentive for students to think of their own questions about the concepts they are learning.&lt;/p&gt; &lt;h2 id=&quot;transferable-skill-communication-explaining-and-persuading&quot;&gt;Transferable Skill: Communication: Explaining and Persuading&lt;/h2&gt; &lt;p&gt;The method of teaching used above is called the “Socratic method.” Socrates famously &lt;a href=&quot;https://en.wikipedia.org/wiki/Meno#Dialogue_with_Meno.27s_slave&quot;&gt;explained mathematics to an uneducated servant&lt;/a&gt;. Explaining complicated things in simple terms is an art. There is not necessarily a ‘right’ way of explaining something, but some ways are better than others.&lt;/p&gt; &lt;p&gt;Currently math curriculum does not even attempt to challenge students’ ability to explain and persuade. Students go on to their future studies and jobs lacking the ability to explain something technical to people who don’t already understand it and to convince people of something they don’t already believe. These are both skills that could be exercised in the context of math.&lt;/p&gt; &lt;p&gt;Here is an example. When I was in middle school, I was arguing with my friends about whether &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0.999&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0.999\ldots&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (repeating forever) was equal to 1. I thought it was not the same as 1, but a hair less than 1. My friend Ben was just as adamant that &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0.999&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0.999\ldots&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; exactly equal to 1. His explanation was short, but persuasive.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;He asked us if we believed &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.333&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\frac 1 3 = 0.333\ldots&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.190108em;vertical-align:-0.345em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.845108em;&quot;&gt;&lt;span style=&quot;top:-2.6550000000000002em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; exactly, no approximation (if you could expand the ellipsis infinitely). We of course agreed.&lt;/li&gt; &lt;li&gt;Then he asked us if &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 = 3 \times \frac 1 3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.190108em;vertical-align:-0.345em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.845108em;&quot;&gt;&lt;span style=&quot;top:-2.6550000000000002em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; exactly. Nothing special here either.&lt;/li&gt; &lt;li&gt;Then he said that &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;0.333&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 = 3 \times \frac 1 3 = 3 \times 0.333\ldots&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.190108em;vertical-align:-0.345em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.845108em;&quot;&gt;&lt;span style=&quot;top:-2.6550000000000002em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; exactly. “Ok?” we nodded.&lt;/li&gt; &lt;li&gt;When multiplying decimal digits, you multiply each digit by the multiplier, so &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;0.333&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.999&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;3 \times 0.333\ldots = 0.999\ldots&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; exactly. We learned that years ago and used it recently.&lt;/li&gt; &lt;li&gt;Hence &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mfrac&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;0.333&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0.999&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1 = 3 \times \frac 1 3 = 3 \times 0.333\ldots = 0.999\ldots&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.190108em;vertical-align:-0.345em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.845108em;&quot;&gt;&lt;span style=&quot;top:-2.6550000000000002em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.394em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.345em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; exactly. It’s just another way of writing the same thing.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;em&gt;Aside: &lt;a href=&quot;https://www.youtube.com/watch?v=TINfzxSnnIE&quot;&gt;Here&lt;/a&gt; is an entertaining presentation of this and similar arguments.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;We were reluctant that there was more than one way of writing a number in decimals—namely 1 and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;0.999&lt;/mn&gt;&lt;mo&gt;…&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;0.999\ldots&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.16666666666666666em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;minner&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;—but logic has no such hesitation. Once you go looking, you can find more examples of numbers with multiple decimal names: 0 is 0 or -0, 4 is 4.00 or 4.0.&lt;/p&gt; &lt;p&gt;If you are still not convinced, you have to reject one of the individual steps, but each step is exceedingly reasonable—even obvious—in isolation. That’s what makes this argument so cogent. At each step, he thought from our perspective: “what facts does my audience already believe and how can I use &lt;em&gt;those&lt;/em&gt;?”&lt;/p&gt; &lt;p&gt;Although he knew more math and jargon than us, he deliberately did not use it because he wanted us to understand it. People with an overinflated ego argue or ‘explain’ using complicated topics that “you wouldn’t understand”; people of true intelligence argue or explain something complicated &lt;a href=&quot;https://www.explainxkcd.com/wiki/index.php/Thing_Explainer&quot;&gt;using simple terms&lt;/a&gt;, &lt;a href=&quot;https://kottke.org/17/06/if-you-cant-explain-something-in-simple-terms-you-dont-understand-it&quot;&gt;see Richard Feynman&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Perhaps randomly assigned groups of students could present each concept to the rest of the class. They would have to prepare a lesson and field whatever questions or confusions the rest of the class had. &lt;em&gt;Aside: one of my classes did this. It was illuminating to see the differences in how other people understood and learned the concepts. Talking out competing viewpoints exposed a lot of misconceptions, sometimes even in the student-teachers. Without that experience, those misconceptions &lt;a href=&quot;http://www.ascd.org/publications/books/115011/chapters/Why-Check-for-Understanding%C2%A2.aspx&quot;&gt;might never have been noticed and corrected&lt;/a&gt;. What’s more, in these discussions, it was explained exactly why the misconceptions are wrong, and not just “because it is” or, worse, “because the teacher said so.”&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Perhaps classes should also incorporate proof-writing into their class. Most math competitions (like &lt;a href=&quot;https://artofproblemsolving.com/wiki/index.php/United_States_of_America_Mathematical_Olympiad&quot;&gt;USAMO&lt;/a&gt; and &lt;a href=&quot;https://www.maa.org/math-competitions/putnam-competition&quot;&gt;Putnam&lt;/a&gt;) do this and have efficient infrastructure for grading. Students should be graded on mathematical correctness and “elegance.” I understand that it would take more teacher-effort to grade these essay-like responses, but I hope you see why I think that’s a good trade. While elegance can be subjective, it is not more so than grading essays in English class. I think the skill of explaining is inherently subjectively evaluated in any form, but by no means should that complaint excuse us from practicing a vital skill.&lt;/p&gt; &lt;h2 id=&quot;making-things-better&quot;&gt;Making Things Better&lt;/h2&gt; &lt;p&gt;I don’t know exactly how to incorporate these ideas. Surely there is some value and wisdom in the traditional system; everyone needs to learn fractions. I am merely pointing out that maybe we need some traditional rote-learning mixed with novel problem-solving and communication, which are currently absent completely. In English class, where there is time allocated to appreciate the great masters and to express your own ideas creatively. I think math can be studied more like English If not for the sheer beauty of mathematics or blissful joy of creativity, then for the pragmatism of transferable skills students could gain in the process.&lt;/p&gt; &lt;p&gt;Twelve years of seemingly ceaseless mental drudgery extinguish any remaining remnant of mathematical creativity, curiosity, or inspiration from students (see the wonderful &lt;a href=&quot;https://www.maa.org/sites/default/files/pdf/devlin/LockhartsLament.pdf&quot;&gt;A Mathematicians Lament by Paul Lockhart&lt;/a&gt; for more in this vein). It’s no wonder most students hate math; I couldn’t do a better job of making people hat it if I tried! It’s also no wonder that sometimes people at their job act like mindless, instruction-following drones that do only exactly what they are told with no ability to improvise or innovate in a self-motivated way.&lt;/p&gt; &lt;p&gt;I won’t pretend I am the first person on earth to notice this. These ideas are already implemented in some institutions. I was lucky enough to have dedicated teachers who went above and beyond what was required to implement these ideas. They also believed in me, and I am grateful for that. I hope to follow their example with my own spin on things too.&lt;/p&gt; &lt;h2 id=&quot;math-is-art&quot;&gt;Math is Art&lt;/h2&gt; &lt;p&gt;From the Mayans to the Greeks, from Babylon to the Indus River, every civilization has developed the disciplines of music, painting, and &lt;em&gt;math&lt;/em&gt;. It satisfies some basic human desire to explore the unknown, express ideas, and awe at sheer beauty. Sometimes it happens to be useful, but its purpose is &lt;a href=&quot;https://en.wikipedia.org/wiki/A_Mathematician%27s_Apology&quot;&gt;to be beautiful&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;That’s what math actually is to those who practice it. You get to make crazy up hypotheticals (e.g. “what if we had numbers whose squares are negative?”) and investigate them to their logical conclusion (e.g. complex analysis). There are many more of these: “are all infinities equal?” gives cardinal and ordinal numbers, “could a computer program prove everything?” gives computability theory and the incompleteness theorem.&lt;/p&gt; &lt;p&gt;I have found many practical reasons to teach math differently, but this is the one that resonates with me the most: math is a creative pursuit, and keeping this a secret among math people prevents a lot of people from experiencing the sublime, stupid-giddy, joy of being creative in this way.&lt;/p&gt; &lt;p&gt;&lt;em&gt;I gave a &lt;a href=&quot;https://youtu.be/IQqb8HfN5hw&quot;&gt;TEDx talk&lt;/a&gt; on this topic earlier. I have written and revised the same ideas in essay form.&lt;/em&gt;&lt;/p&gt;</content><author><name>Samuel Grayson</name></author><category term="math"/><category term="pedagogy"/><summary type="html">Most students will say math class is stupid and boring. As a math person myself, I have to say: they're right!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samgrayson.me/assets/img/creative-thinking-in-math-class/rick_on_school.jpg"/></entry><entry><title type="html">The Chaos of History (part 2)</title><link href="https://samgrayson.me/2017-01-09-chaos-of-history-2/" rel="alternate" type="text/html" title="The Chaos of History (part 2)"/><published>2017-01-09T00:00:00-06:00</published><updated>2017-01-09T00:00:00-06:00</updated><id>https://samgrayson.me/chaos-of-history-2</id><content type="html" xml:base="https://samgrayson.me/2017-01-09-chaos-of-history-2/">&lt;p&gt;In a &lt;a href=&quot;/2016-07-21-chaos-of-history-1/&quot;&gt;previous post&lt;/a&gt;, I talked about how a few random events can greatly change history. In this post, I will describe that idea more mathematically.&lt;/p&gt; &lt;h2 id=&quot;a-thought-experiment&quot;&gt;A Thought Experiment&lt;/h2&gt; &lt;p&gt;Let’s say I throw a rock straight up into the air and measure how far away it falls 10000 times. &lt;em&gt;I have too much free time.&lt;/em&gt; I can plot that distance against the number of falls. You would expect most of them to fall very close to where I threw the rock. You would expect far-away falls to be pretty rare.&lt;/p&gt; &lt;p&gt;We might suggest that this fits a Gaussian distribution (that’s what most people associate bell-curve). Most physical phenomena roughly follow a Gaussian distribution. Towards the far right, the probability is very small. It should be rare that I would toss a rock straight up in the air and see it land 20 meters away. The far left and far right are called the ‘tails’ of the distribution.&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;Gaussian distribution&quot; src=&quot;/assets/img/chaos-of-history-2/gaussian_distribution.png&quot; style=&quot;margins: auto;&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;haphazard-stroll&quot;&gt;Haphazard Stroll&lt;/h2&gt; &lt;p&gt;Now let’s say I throw the rock in the air, but this time I walk to where it landed and throw the rock in the air again from that point. This is called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_walk&quot;&gt;random walk&lt;/a&gt;, and here is what it looks like when the rock falls based on a Gaussian distribution. For good measure, I will run 5 random walks starting from different spots in different colors.&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;Gaussian random walk&quot; src=&quot;/assets/img/chaos-of-history-2/gaussian_random_walk.png&quot; style=&quot;margins: auto;&quot; /&gt;&lt;/p&gt; &lt;p&gt;But I want to talk about another distribution: the Cauchy distribution. It is very similar to the Gaussian distribution, but it is ever-so-slightly higher at the tails (hence it is called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fat-tailed_distribution&quot;&gt;fat-tailed distribution&lt;/a&gt;). This means that extreme outcomes are still rare, but slightly less rare. People often too quick to assume that a bell-curve shaped distributions are Gaussian, as &lt;a href=&quot;http://rocketscienceofwallstreet.blogspot.com/2012/04/nassim-nicholas-taleb-against-gaussian.html&quot;&gt;some would argue&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;Gaussian and Cauchy distribution&quot; src=&quot;/assets/img/chaos-of-history-2/gaussian_and_cauchy.png&quot; style=&quot;margins: auto;&quot; /&gt;&lt;/p&gt; &lt;p&gt;But the difference seems small. Let’s see how these distributions differ in a real experiment. I’ll take a random walk using the Cauchy distribution and look at the differences&lt;/p&gt; &lt;p&gt;&lt;img alt=&quot;Cauchy random walk&quot; src=&quot;/assets/img/chaos-of-history-2/cauchy_random_walk.png&quot; style=&quot;margins: auto;&quot; /&gt;&lt;/p&gt; &lt;p&gt;In the Gaussian random walk, no single rock-throw really moved us far from the origin. None of the throw were really ‘out there’. In each Cauchy random walk, most of the throws didn’t affect the outcome that much, but there were one or two really impactful throws that did most of the moving (especially in the blue and green random walk). Outliers are still rare, but when they do occur, they are &lt;strong&gt;hugely influential&lt;/strong&gt;.&lt;/p&gt; &lt;h2 id=&quot;the-historical-analogy&quot;&gt;The Historical Analogy&lt;/h2&gt; &lt;p&gt;I suggest that many historical phenomena act have analogous behavior. One example might be, the assassination of Arch Duke Franz Ferdinand; another might be the Gulf of Tonkin incident, 9/11, or the battle of Thermopylae.&lt;/p&gt; &lt;p&gt;There &lt;em&gt;are&lt;/em&gt; historical trends and forces, but they are often realized by single explosive events. There was a general trend of anti-imperialism in the early twentieth century. Even though most movements of that trend were minor, it only took one explosive assassination to change world history irrevocably.&lt;/p&gt; &lt;h2 id=&quot;looking-to-the-future&quot;&gt;Looking to the Future&lt;/h2&gt; &lt;p&gt;The &lt;em&gt;average value&lt;/em&gt; of a Gaussian or Cauchy distribution is zero (move neither to the left or to the right). &lt;em&gt;On average&lt;/em&gt;, when we throw the rock straight up, it lands on top of me. The left moves will cancel out the right moves and it will end up not far from where starts (the distribution is symmetric). The &lt;em&gt;average&lt;/em&gt; may be easy to predict, but &lt;em&gt;reality&lt;/em&gt; might be different.&lt;/p&gt; &lt;p&gt;In the Gaussian random walk, most of the moves are medium. In the Cauchy most of the moves are very small, or very large. A few very extreme moves cause most of the movement away from the expected value. As a result, the average predicts reality quite poorly. It would have been completely debunked by any one of those extreme moves.&lt;/p&gt; &lt;p&gt;This is why markets are so difficult to predict. There are a few unpredictable and extreme events which cause most of the movement (called “black swan events”). On average, prices are constant or increasing steadily (due to inflation), but then the OPEC declares an embargo and the price of oil becomes 300% larger. Or hurricane Katrina hits. That is an unlikely and extreme event that screws up the models. &lt;a href=&quot;https://dollarvigilante.com/blog/2016/08/09/nassim-taleb-warns-biggest-black-swan-event-coming.html&quot;&gt;Some argue&lt;/a&gt; that lack of recognition of black swan events played a part in causing the housing crisis.&lt;/p&gt; &lt;p&gt;Should we try harder to predict black swan events with models? There will never be enough data-points to do useful analysis of them because of their characteristic rarity. The best we can do is remember that every model is fallible and engineer the robustness necessary to handle that fallibility. These are “unknown unknowns” in &lt;a href=&quot;https://en.wikipedia.org/wiki/There_are_known_knowns&quot;&gt;the parlance of Donald Rumsfeld&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Don’t confuse unlikely with impossible.&lt;/p&gt;</content><author><name>Samuel Grayson</name></author><category term="math"/><category term="history"/><summary type="html">In a previous post, I talked about how a few random events can greatly change history. In this post, I will describe that in terms of mathematics and use that to show you why things like stock markets are so difficult to predict.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samgrayson.me/assets/img/chaos-of-history-2/jackson_pollock.jpg"/></entry><entry><title type="html">Zealots of Tech</title><link href="https://samgrayson.me/2016-08-12-zealots-of-tech/" rel="alternate" type="text/html" title="Zealots of Tech"/><published>2016-08-12T00:00:00-05:00</published><updated>2016-08-12T00:00:00-05:00</updated><id>https://samgrayson.me/zealots-of-tech</id><content type="html" xml:base="https://samgrayson.me/2016-08-12-zealots-of-tech/">&lt;h2 id=&quot;welcome-to-the-cult&quot;&gt;Welcome to the Cult&lt;/h2&gt; &lt;p&gt;There are few techniques that are globally applicable in software development. But we like to act is if that were not the case.&lt;/p&gt; &lt;p&gt;This is most apparent in programming languages. You have headstrong engineers who insist that their programming language is better than yours, with &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/3of8zk/the_cult_of_haskell_is_my_favourite_programming/&quot;&gt;cult-like devotion&lt;/a&gt;. Most of the time, programming languages have different strengths and weaknesses, so the ‘best’ programming language depends on the problem. It is religious zealotry when they don’t hear out arguments against their language of choice. But that insistence is mostly unfounded. Look at the sentiment on &lt;a href=&quot;https://www.quora.com/What-are-the-best-programming-languages-to-learn-today&quot;&gt;this quora question&lt;/a&gt; on the ‘best programming language’ with many comments like “depends on what you want to optimize” and “it’s far more important to learn to be a good programmer.”&lt;/p&gt; &lt;p&gt;Managers and investors have a different set of biases about programming languages: they insist on using what everyone else is using. They know that Java on tomcat is a popular choice for web development. They block out other options like Ruby on Rails, which might better suit a startup that needs to &lt;a href=&quot;https://www.minddigital.com/ruby-on-rails-for-robust-and-rapid-development/&quot;&gt;go from 0 to 60&lt;/a&gt;, because of their fundamentalist belief that some programming language or technique is the &lt;em&gt;only&lt;/em&gt; way. What’s worse is when they prevent an innovative solution from being developed because “it’s &lt;a href=&quot;http://paulgraham.com/icad.html&quot;&gt;not industry standard&lt;/a&gt;.” &lt;em&gt;Aside: That utterance is the sound of a good idea dying an unnecessary death in a company that reeks of mediocrity.&lt;/em&gt;&lt;/p&gt; &lt;h2 id=&quot;critical-thinking&quot;&gt;Critical Thinking&lt;/h2&gt; &lt;p&gt;There is some value in using languages you have deep prior knowledge of, but there is also value in keeping your mind sharp by learning new things. Technology is changing so fast that the tools you feel comfortable with may not be relevant anymore. There is also value in using a technique that has a large community for support, but that argument is often weighed too heavily against other, more direct advantages (see &lt;a href=&quot;http://waitbutwhy.com/2015/11/the-cook-and-the-chef-musks-secret-sauce.html&quot;&gt;Tim Urban’s post&lt;/a&gt; at headline “The Cook and the Chef”).&lt;/p&gt; &lt;p&gt;Human tendency is to jump on the hype bandwagon and follow the crowd. It is the underlying habit of humans to fall into &lt;a href=&quot;https://en.wikipedia.org/wiki/Groupthink&quot;&gt;groupthink&lt;/a&gt; caused by laziness. It isn’t an overt laziness like shirking duty or skipping work, it is a subconscious laziness that avoids critical evaluation of one’s own opinions. It isn’t too dissimilar from the echo-chamber of our political environment, or a &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Emperor%27s_New_Clothes&quot;&gt;naked emperor&lt;/a&gt; who claims that only the intelligent are able to see his new clothes.&lt;/p&gt; &lt;p&gt;The next time you hear “do this because it is more RESTful”, you should ask yourself “why are we embracing REST here. Does it make sense?” That way you justify your design decisions based on the problem itself, not some principle you have forced your solution to conform to. Don’t be afraid to question the prevailing wisdom like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Social_gadfly&quot;&gt;gadfly&lt;/a&gt;. “Yes, I know this diverges from the principles of REST, but our multi-part search query isn’t conducive to RESTful URI design since the components are not hierarchical.”&lt;/p&gt; &lt;p&gt;I leave you with the old Unix adage of pragmatism: &lt;em&gt;use the right tool for the job&lt;/em&gt;.&lt;/p&gt;</content><author><name>Samuel Grayson</name></author><category term="programming"/><summary type="html">There are few technologies and methodologies that are globally applicable in software development, be it REST, agile methodology, or Python. But we like to act is if that were the case. Instead flexible and pragmatic enough to use the right tool for the job.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samgrayson.me/assets/img/zealots_of_tech/tools.jpg"/></entry><entry><title type="html">The Chaos of History (part 1)</title><link href="https://samgrayson.me/2016-07-21-chaos-of-history-1/" rel="alternate" type="text/html" title="The Chaos of History (part 1)"/><published>2016-07-21T00:00:00-05:00</published><updated>2016-07-21T00:00:00-05:00</updated><id>https://samgrayson.me/chaos-of-history-1</id><content type="html" xml:base="https://samgrayson.me/2016-07-21-chaos-of-history-1/">&lt;h2 id=&quot;the-man-who-caused-history&quot;&gt;The Man Who Caused History&lt;/h2&gt; &lt;p&gt;Think of the history of the twentieth century and who is most responsible for it. You might be thinking of world leaders like Franklin Delano Roosevelt, Joseph Stalin, or Mao Zedong. Or perhaps you are thinking of those who invented the technology that changed the world, such as Albert Einstein or Tim Berners-Lee.&lt;/p&gt; &lt;p&gt;But I suggest a man you probably haven’t heard of named Gravilo Princip.&lt;/p&gt; &lt;p&gt;The day started off poorly for Archduke Franz Ferdinand when three security officials were left behind, by mistake. Then an assassin threw a bomb at his car! But the bomb bounced off his car and the assassination failed. The Archduke’s motorcade sped away to protect him from any other assassination attempts.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;“The Ides of March have come, and I am still alive!” – Julius Caesar by William Shakespeare&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Princip’s realized he lost his chance, so he gave up and went to a nearby food shop. But when the motorcade started up again, someone forgot to tell the driver to change the route. When this was realized, the command was given to reverse, but the transmission was jammed so the car stopped &lt;em&gt;right in front of an awe-stricken Pincip&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;By a ridiculous stroke of misfortune (or luck, depending on your point of view), between the security officials being left behind, the first failed assassination attempt, the driver not knowing the route, the transmission being jammed, Gravilo Princip shot and killed Archduke Ferdinand&lt;/p&gt; &lt;h2 id=&quot;princips-butterfly-effect&quot;&gt;Princip’s Butterfly Effect&lt;/h2&gt; &lt;p&gt;As you might know, this assassination brings up long-standing tensions in Europe, setting off World War One.&lt;/p&gt; &lt;p&gt;As you might know, the treaty which ended World War One involved massive war reparations to be paid by the Germans. The German people came to resent of these foreign powers spread, making it possible for the Nazis to come to power. Thus begins World War Two.&lt;/p&gt; &lt;p&gt;As you might know, the victors of World War Two partitioned off Europe, and while they were doing so, certain tensions among the victors emerged. This led to the stand off of the Cold War.&lt;/p&gt; &lt;p&gt;So Princip brought about a series of events which caused the Cold War. Or perhaps the Archduke’s driver should be the one whom we say brought about these events. Or perhaps the man who owned the food shop that Princip stopped at, for if he were not there perhaps Princip would gone to a different place that wasn’t on the motorcade’s route.&lt;/p&gt; &lt;p&gt;Some would counterargue that the Austro-Hungarian empire was already ripe for conflict, and if not Princip, then someone else would set it off. But if it was set off in the middle east as a result of Ottoman aggression (there was unrest in the region ever since the Young Turk Revolution). Maybe the alignment would have been different. Russia would not feel compelled to defend the Slavic peoples, and maybe Russia uses this hypothetical war to seek a warm-water port, and with the manpower of Russia weighing on the other side of the scale, the outcome could be drastically different. The specific details of these events can matter a lot&lt;/p&gt; &lt;h2 id=&quot;false-assumptions&quot;&gt;False Assumptions&lt;/h2&gt; &lt;p&gt;We like to think that systems like human society have some predictable order. We like to think that this order is affected by world leaders and important people. We like to think that things happen for compelling reasons. But when a world war breaks out on account of the chauffeurs wrong turn, I realize that human society is so vastly complex and intricate that some events are just so ‘out there’ to be foreseen.&lt;/p&gt; &lt;p&gt;Historical trends and forces are powerful and determine the ‘steady’ events, like the US economy growing a few percentage points per year. However The most interesting events that really make a change, like the housing crisis or 9/11, are completely random and unforeseen, even by scholars. That course of history wasn’t determined by simple rules ore logical reasons. It’s just Lady Fortuna spinning her wheel.&lt;/p&gt; &lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/2017-01-09-chaos-of-history-2/&quot;&gt;Part 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Scientific American: &lt;a href=&quot;http://blogs.scientificamerican.com/the-curious-wavefunction/gavrilo-princip-conspiracy-theories-and-the-fragility-of-cause-and-effect/&quot;&gt;Gavrilo Princip, conspiracy theories and the fragility of cause and effect&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.nytimes.com/2007/04/22/books/chapters/0422-1st-tale.html?_r=0&quot;&gt;Chapter 1&lt;/a&gt; of ‘The Black Swan’ by Nassim Taleb&lt;/li&gt; &lt;/ul&gt;</content><author><name>Samuel Grayson</name></author><category term="history"/><summary type="html">We like to think that systems like human society have some predictable order, when in reality, history is driven by completely unpredictable random events.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://samgrayson.me/assets/img/chaos-of-history-1/Assassination_of_Archduke_Franz_Ferdinand.jpg"/></entry></feed>